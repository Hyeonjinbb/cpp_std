#include <iostream>
using namespace std;

//1 포인터 활용
//크기가 5인 정수 배열을 동적으로 할당하고 이를 가리키는 포인터를 선언하기
int main()
{
	int *int_value = new int[5];
	
	//동적으로 할당한 배열에 1부터 5까지의 값 저장하기
	for (int i = 0; i < 5; i++)
	{
		int_value[i] = i + 1; //배열에 1~5까지 저장
	}
	//할당한 배열의 내용 출력하기
	for (int i = 0; i < 5; i++)
	{
		cout << "int_value: " << int_value[i] << endl;
	}
	delete[] int_value; //할당한 메모리를 해제하기
	
	return 0;
}



//3 동적 메모리 할당 이해
//동적으로 할당한 메모리는 반드시 해제해야하는 이유, 그리고 일반 변수는 왜 메모리 해제를 관리하지 않아도 될까?


//4 레퍼런스 변수
//int &ref_invaild_value; <- 컴파일 오류가 발생하는 이유
//컴파일 오류가 발생하는 이유는 숫자를 래퍼런스 할 수 없기 때문

//5 변수, 레퍼런스, 포인터의 차이
// 값에 의한 호출, 참조에 의한 호출, 주소에 의한 호출의 차이를 서술하기
//값:
//레퍼런스: 
//포인터: